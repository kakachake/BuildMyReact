(()=>{"use strict";var __webpack_modules__={"./src/Karo/index.js":
/*!***************************!*\
  !*** ./src/Karo/index.js ***!
  \***************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst TEXT_ELEMENT = "TEXT_ELEMENT";\nfunction createElement(type, props, ...children) {\n  return {\n    type,\n    props: {\n      ...props,\n      children: children.map(child => {\n        return typeof child === "object" ? child : createTextElement(child);\n      })\n    }\n  };\n}\nfunction createTextElement(text) {\n  return {\n    type: "TEXT_ELEMENT",\n    props: {\n      nodeValue: text,\n      children: []\n    }\n  };\n}\nfunction createDom(fiber) {\n  const dom = fiber.type === TEXT_ELEMENT ? document.createTextNode("") : document.createElement(fiber.type);\n  updateDom(dom, {}, fiber.props);\n  return dom;\n}\nfunction commitRoot() {\n  // add nodes to dom\n  deletions.forEach(commitWork);\n  commitWork(wipRoot.child);\n  currentRoot = wipRoot;\n  wipRoot = null;\n}\nconst isEvent = key => key.startsWith("on");\nconst isProperty = key => key !== "children" && !isEvent(key);\nconst isNew = (prev, next) => key => prev[key] !== next[key];\nconst isGone = (prev, next) => key => !(key in next);\nfunction updateDom(dom, prevProps, nextProps) {\n  // 移除旧的或改变的侦听器\n  Object.keys(prevProps).filter(isEvent).filter(key => {\n    return isNew(prevProps, nextProps)(key) || isGone(prevProps, nextProps)(key);\n  }).forEach(name => {\n    const eventType = name.toLowerCase().substring(2);\n    dom.removeEventListener(eventType, prevProps[name]);\n  });\n\n  // 添加新的侦听器\n  Object.keys(nextProps).filter(isEvent).filter(isNew(prevProps, nextProps)).forEach(name => {\n    const eventType = name.toLowerCase().substring(2);\n    dom.addEventListener(eventType, nextProps[name]);\n  });\n\n  // 移除旧的属性\n  Object.keys(prevProps).filter(isProperty).filter(isGone(prevProps, nextProps)).forEach(name => {\n    dom[name] = "";\n  });\n\n  // 添加新的属性\n  Object.keys(nextProps).filter(isProperty).filter(isNew(prevProps, nextProps)).forEach(name => {\n    dom[name] = nextProps[name];\n  });\n}\nfunction commitWork(fiber) {\n  if (!fiber) {\n    return;\n  }\n  let domParentFiber = fiber.parent;\n  while (!domParentFiber.dom) {\n    domParentFiber = domParentFiber.parent;\n  }\n  const domParent = domParentFiber.dom;\n  if (fiber.effectTag === "PLACEMENT" && fiber.dom !== null) {\n    domParent.appendChild(fiber.dom);\n  } else if (fiber.effectTag === "UPDATE" && fiber.dom !== null) {\n    updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n  } else if (fiber.effectTag === "DELETION") {\n    // 如果是DELETION标记，我们移除该子节点\n    commitDeletion(fiber, domParent);\n  }\n  commitWork(fiber.child);\n  commitWork(fiber.sibling);\n}\nfunction commitDeletion(fiber, domParent) {\n  if (fiber.dom) {\n    domParent.removeChild(fiber.dom);\n  } else {\n    commitDeletion(fiber.child, domParent);\n  }\n}\nfunction render(element, container) {\n  wipRoot = {\n    dom: container,\n    props: {\n      children: [element]\n    },\n    alternate: currentRoot\n  };\n  deletions = [];\n  nextUnitOfWork = wipRoot;\n}\nlet nextUnitOfWork = null;\nlet currentRoot = null;\nlet wipRoot = null;\nlet deletions = null;\nfunction workLoop(deadline) {\n  let shouldYield = false;\n  while (nextUnitOfWork && !shouldYield) {\n    nextUnitOfWork = perfomUnitOfWork(nextUnitOfWork);\n    shouldYield = deadline.timeRemaining() < 1;\n  }\n  if (!nextUnitOfWork && wipRoot) {\n    commitRoot();\n  }\n  requestIdleCallback(workLoop);\n}\nrequestIdleCallback(workLoop);\nfunction perfomUnitOfWork(fiber) {\n  const isFunctionComponent = fiber.type instanceof Function;\n  if (isFunctionComponent) {\n    updateFunctionComponent(fiber);\n  } else {\n    updateHostComponents(fiber);\n  }\n\n  // return next unit of work\n\n  //如果有孩子，则返回孩子\n  if (fiber.child) {\n    return fiber.child;\n  }\n  let nextFiber = fiber;\n  while (nextFiber) {\n    // 如果有兄弟，返回兄弟\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    // 都没有去父元素，找“uncle”节点\n    nextFiber = nextFiber.parent;\n  }\n}\n\n// work in progress fiber\nlet wipFiber = null;\nlet hookindex = null;\nfunction updateFunctionComponent(fiber) {\n  wipFiber = fiber;\n  hookindex = 0;\n  wipFiber.hooks = [];\n  const children = [fiber.type(fiber.props)];\n  reconcileChildren(fiber, children);\n}\nfunction useState(initial) {\n  const oldHook = wipFiber.alternate?.hooks?.[hookindex] || null;\n  const hook = {\n    state: oldHook ? oldHook.state : initial,\n    queue: []\n  };\n  const actions = oldHook ? oldHook.queue : [];\n  actions.forEach(action => {\n    hook.state = action(hook.state);\n  });\n  const setState = action => {\n    hook.queue.push(action);\n    // 之后和之前在 render 函数中做的一样，\n    // 将 wipRoot 设置为当前 fiber，\n    // 之后我们的调度器会帮我们开始新一轮的渲染的。\n    wipRoot = {\n      dom: currentRoot.dom,\n      props: currentRoot.props,\n      alternate: currentRoot\n    };\n    nextUnitOfWork = wipRoot;\n    deletions = [];\n  };\n  wipFiber.hooks.push(hook);\n  hookindex++;\n  return [hook.state, setState];\n}\n\n// 原生节点\nfunction updateHostComponents(fiber) {\n  // add Node\n  // 创建fiber对应的DOM节点，并将它添加到父节点DOM上\n  if (!fiber.dom) {\n    fiber.dom = createDom(fiber);\n  }\n\n  // create new fibers\n  const elements = fiber.props.children;\n  reconcileChildren(fiber, elements);\n}\nfunction reconcileChildren(wipFiber, elements) {\n  let index = 0;\n\n  // 取出上一次的Fiber\n  let oldFiber = wipFiber?.alternate?.child || null;\n  let prevSibling = null;\n  while (index < elements.length || oldFiber != null) {\n    const element = elements[index];\n    let newFiber = null;\n    // compare old fiber to element\n    const sameType = oldFiber && element && element.type === oldFiber.type;\n    // 如果类型相同，更新节点\n    if (sameType) {\n      // TODO update the node\n      newFiber = {\n        type: oldFiber.type,\n        props: element.props,\n        dom: oldFiber.dom,\n        parent: wipFiber,\n        alternate: oldFiber,\n        effectTag: "UPDATE"\n      };\n    }\n\n    // 如果类型不同，删除旧节点，创建新节点\n\n    // 创建新节点\n    if (element && !sameType) {\n      // TODO add this node\n      // 对于需要生成新DOM节点的Fiber，我们将其effectTag设置为PLACEMENT\n      newFiber = {\n        type: element.type,\n        props: element.props,\n        dom: null,\n        parent: wipFiber,\n        alternate: null,\n        effectTag: "PLACEMENT"\n      };\n    }\n\n    // 删除旧节点\n    if (oldFiber && !sameType) {\n      // TODO delete the oldFiber\'s node\n      // 对于需要删除的节点，我们将其effectTag设置为DELETION\n      oldFiber.effectTag = "DELETION";\n      deletions.push(oldFiber);\n    }\n\n    // 根据是否是第一个子节点，来设置父节点的child属性的指向，或者上一个节点的sibiling属性指向\n    if (index === 0) {\n      wipFiber.child = newFiber;\n    } else {\n      prevSibling.sibling = newFiber;\n    }\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n    prevSibling = newFiber;\n    index++;\n  }\n}\nconsole.log("karo");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  createElement,\n  render,\n  useState\n});\n\n//# sourceURL=webpack:///./src/Karo/index.js?')}},__webpack_module_cache__={},deferred;function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(e,n,r,o)=>{if(!n){var t=1/0;for(_=0;_<deferred.length;_++){for(var[n,r,o]=deferred[_],i=!0,l=0;l<n.length;l++)(!1&o||t>=o)&&Object.keys(__webpack_require__.O).every((e=>__webpack_require__.O[e](n[l])))?n.splice(l--,1):(i=!1,o<t&&(t=o));if(i){deferred.splice(_--,1);var p=r();void 0!==p&&(e=p)}}return e}o=o||0;for(var _=deferred.length;_>0&&deferred[_-1][2]>o;_--)deferred[_]=deferred[_-1];deferred[_]=[n,r,o]},__webpack_require__.d=(e,n)=>{for(var r in n)__webpack_require__.o(n,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={karo:0};__webpack_require__.O.j=n=>0===e[n];var n=(n,r)=>{var o,t,[i,l,p]=r,_=0;if(i.some((n=>0!==e[n]))){for(o in l)__webpack_require__.o(l,o)&&(__webpack_require__.m[o]=l[o]);if(p)var a=p(__webpack_require__)}for(n&&n(r);_<i.length;_++)t=i[_],__webpack_require__.o(e,t)&&e[t]&&e[t][0](),e[t]=0;return __webpack_require__.O(a)},r=self.webpackChunk=self.webpackChunk||[];r.forEach(n.bind(null,0)),r.push=n.bind(null,r.push.bind(r))})();var __webpack_exports__=__webpack_require__("./src/Karo/index.js");__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();