(self.webpackChunk=self.webpackChunk||[]).push([["step3-concurreentMode"],{"./src/3-concurreentMode/index.jsx":
/*!*****************************************!*\
  !*** ./src/3-concurreentMode/index.jsx ***!
  \*****************************************/()=>{eval('const Karo = (() => {\n  const TEXT_ELEMENT = "TEXT_ELEMENT";\n  function createElement(type, props, ...children) {\n    return {\n      type,\n      props: {\n        ...props,\n        children: children.map(child => {\n          return typeof child === "object" ? child : createTextElement(child);\n        })\n      }\n    };\n  }\n  function createTextElement(text) {\n    return {\n      type: "TEXT_ELEMENT",\n      props: {\n        nodeValue: text,\n        children: []\n      }\n    };\n  }\n  let nextUnitOfWork = null;\n  function workLoop(deadline) {\n    let shouldYield = false;\n    while (nextUnitOfWork && !shouldYield) {\n      nextUnitOfWork = perfomUnitOfWork(nextUnitOfWork);\n      shouldYield = deadline.timeRemaining() < 1;\n    }\n    requestIdleCallback(workLoop);\n  }\n  requestIdleCallback(workLoop);\n  function perfomUnitOfWork(nextUnitOfWork) {\n    // TODO\n  }\n  function render(element, container) {\n    const dom = element.type === TEXT_ELEMENT ? document.createTextNode("") : document.createElement(element.type);\n    Object.keys(element.props).forEach(key => {\n      if (key !== "children") {\n        dom[key] = element.props[key];\n      }\n    });\n    element.props.children.forEach(child => {\n      render(child, dom);\n    });\n    container.appendChild(dom);\n  }\n  return {\n    createElement,\n    render\n  };\n})();\n\n/** @jsx Karo.createElement */\nconst element = Karo.createElement("div", {\n  id: "foo"\n}, Karo.createElement("a", null, "bar"), Karo.createElement("b", null));\nconst container = document.getElementById("root");\nconsole.log(element);\nKaro.render(element, container);\n\n//# sourceURL=webpack:///./src/3-concurreentMode/index.jsx?')}},e=>{var n;n="./src/3-concurreentMode/index.jsx",e(e.s=n)}]);